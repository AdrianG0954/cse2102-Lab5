Link to Doc with Extra Lab Info: https://docs.google.com/document/d/1iLqK2JRLvcJnEhAcl2sX7-53RJy5qFzAqYyWo5ijIro/edit?usp=sharing
--
How to run the code:
1. Clone the repo using git clone
2. Run mvnw build with all updated dependencies
3. Run ./mvnw spring-boot:run and open the link to your VM/proxy/8093/ to access the home directory
--
Description of how three pieces of code work together: 
1. In this system, three key components work together to deliver a cohesive user experience.
2. HTML files within the `/templates` directory serve as the front-end interface, rendering content to users.
3. The `HomeController.java` acts as the central controller, handling user requests, initializing web pages, and interacting with the back end.
4. `HomeControllerTest.java` plays a crucial role in testing and safeguarding the functionality of `HomeController.java`.
5. This collaboration ensures a smooth operation of the web application, from user interaction to data processing, and helps maintain its reliability and performance.
--
REST Endpoints: 
1. The application features several REST endpoints that facilitate communication with the back end.
2. The primary endpoints are mapped through the `HomeController` class, which manages the core functionality of the application.
3. For example, the `/` endpoint renders the home page, while `/not_home` displays quiz questions retrieved from the `QuestionBank` class.
4. The `/test` endpoint handles test-related functionalities.
5. The newly introduced `/questionBank` endpoint allows retrieval of quiz questions as JSON objects.
6. These endpoints are driven by `HomeController`, and the application employs `QuestionBank` to manage and store the quiz questions.
7. Additionally, there is a dedicated REST controller, `QuizController`, that offers endpoints for quiz-related operations, such as retrieving quiz questions and submitting answers.
--